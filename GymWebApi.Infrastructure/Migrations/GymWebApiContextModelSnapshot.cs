// <auto-generated />
using System;
using GymWebApi.Infrastructure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymWebApi.Infrastructure.Migrations
{
    [DbContext(typeof(GymWebApiContext))]
    partial class GymWebApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("GymWebApi.Models.Activity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("ActivityDate")
                        .HasColumnType("date");

                    b.Property<string>("ActivityEndTime")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int?>("ActivityMaxPeople")
                        .HasColumnType("int");

                    b.Property<string>("ActivityName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ActivityStartTime")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ClubId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("TrainerId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.HasKey("ActivityId")
                        .HasName("PK_ActivityId");

                    b.HasIndex("ClubId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Activities", t =>
                        {
                            t.HasTrigger("ActivityCreationTrigger");
                        });
                });

            modelBuilder.Entity("GymWebApi.Models.ActivityCreation", b =>
                {
                    b.Property<DateTime?>("ActivityCreationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ActivityDeletionDate")
                        .HasColumnType("date");

                    b.Property<string>("ActivityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityCreation", (string)null);
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GymWebApi.Models.CardDetail", b =>
                {
                    b.Property<string>("CardId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<int?>("CardBalance")
                        .HasColumnType("int");

                    b.Property<int?>("CardCvc")
                        .HasColumnType("int")
                        .HasColumnName("CardCVC");

                    b.Property<string>("CardExpDate")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<long?>("CardNumber")
                        .HasColumnType("bigint");

                    b.HasKey("CardId")
                        .HasName("PK_CardId");

                    b.ToTable("CardDetails");
                });

            modelBuilder.Entity("GymWebApi.Models.Club", b =>
                {
                    b.Property<string>("ClubId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ClubLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ClubName")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ClubWorkingHours")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ClubId")
                        .HasName("PK_ClubId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("GymWebApi.Models.Membership", b =>
                {
                    b.Property<string>("MembershipId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("MembershipBasePricePerMonth")
                        .HasColumnType("int");

                    b.Property<int>("MembershipDuration")
                        .HasColumnType("int");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("MembershipId")
                        .HasName("PK_MembershipId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("GymWebApi.Models.Trainer", b =>
                {
                    b.Property<string>("TrainerId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("TrainerFirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TrainerLastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TrainerPicture")
                        .HasColumnType("text");

                    b.Property<string>("TrainerSpecialization")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.HasKey("TrainerId")
                        .HasName("PK_TrainerId");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("GymWebApi.Models.TrainerSpecialInformation", b =>
                {
                    b.Property<string>("TrainerEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("TrainerId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("TrainerPhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSpecialInformation", (string)null);
                });

            modelBuilder.Entity("GymWebApi.Models.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<int?>("TransactionCost")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransactionDescription")
                        .HasColumnType("text");

                    b.HasKey("TransactionId")
                        .HasName("PK_TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("GymWebApi.Models.TransactionLog", b =>
                {
                    b.Property<string>("CardId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.HasIndex("CardId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionLog", (string)null);
                });

            modelBuilder.Entity("GymWebApi.Models.UserPrivateInformation", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CardId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Pin")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("PIN");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("CardId");

                    b.ToTable("UserPrivateInformation", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("GymWebApi.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymWebApi.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymWebApi.Models.Activity", b =>
                {
                    b.HasOne("GymWebApi.Models.Club", "Club")
                        .WithMany("Activities")
                        .HasForeignKey("ClubId")
                        .HasConstraintName("FK_Activities_ClubId");

                    b.HasOne("GymWebApi.Models.Trainer", "Trainer")
                        .WithMany("Activities")
                        .HasForeignKey("TrainerId")
                        .HasConstraintName("FK_Activities_TrainerId");

                    b.Navigation("Club");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymWebApi.Models.ActivityCreation", b =>
                {
                    b.HasOne("GymWebApi.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_ActivityCreation_ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("GymWebApi.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("GymWebApi.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("GymWebApi.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetUserToken", b =>
                {
                    b.HasOne("GymWebApi.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymWebApi.Models.TrainerSpecialInformation", b =>
                {
                    b.HasOne("GymWebApi.Models.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .HasConstraintName("FK_TrainerId");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymWebApi.Models.TransactionLog", b =>
                {
                    b.HasOne("GymWebApi.Models.CardDetail", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .HasConstraintName("FK_TransactionLog_CardId");

                    b.HasOne("GymWebApi.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_TransactionLog_TransactionId");

                    b.Navigation("Card");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("GymWebApi.Models.UserPrivateInformation", b =>
                {
                    b.HasOne("GymWebApi.Models.CardDetail", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .HasConstraintName("FK_UserPrivateInformation_CardId");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("GymWebApi.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("GymWebApi.Models.Club", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("GymWebApi.Models.Trainer", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
